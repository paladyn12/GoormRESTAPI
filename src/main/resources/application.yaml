# server config
server:
  port: 8080

spring:
  # DB config
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ohgi_restaurant
    username: ohgiraffers
    password: ohgiraffers
  # fileupload config
  servlet:
    multipart:
      enabled: true
      max-request-size: 10MB
      max-file-size: 1MB
  web:
    resources:
      static-locations: classpath:/productimgs/
  # JPA config
  jpa:
    generate-ddl: false
    database: mysql
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true

# static resource(image media file) config
image:
  add-resource-locations: classpath:/static/productimgs/
  add-resource-handler: /productimgs/**
  image-dir: src/main/resources/static/productimgs
  image-url: http://localhost:8080/productimgs/


# security(jwt) config
jwt:
  secret: BWQ3NDiE+stVlnYfuLeHZ0i2hIRhoGZKIrHAnj0OPedv3aBEOPWJQ9KqqmH/XYWam6MeGG8+7gs2Rbs5ID0Vdg==


# springdoc open-api config
springdoc:
  swagger-ui:
    path: /swagger-ui.html

# logging config
#root: info
#  애플리케이션 전체의 기본 로그 레벨을 info로 설정합니다.
#  info 레벨은 info, warn, error 메시지를 출력하고, debug나 trace는 출력하지 않습니다.
#org.hibernate.SQL: debug
#  Hibernate의 SQL 실행 로그를 debug 레벨로 출력합니다.
#  실행되는 SQL 쿼리를 확인할 수 있습니다.
#org.hibernate.orm.jdbc.bind: trace
#  SQL 쿼리에 바인딩된 파라미터 값을 trace 레벨로 출력합니다.
#  SQL 쿼리와 함께 실제 데이터 값도 확인할 수 있습니다.
logging:
  level:
    root: info
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace